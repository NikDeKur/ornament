package dev.nikdekur.ornament.protection.data

/**
 * # DataEncoder
 *
 * Interface for encrypting and decrypting data using password-based encryption.
 * This interface provides methods to securely encrypt data with a password and later
 * decrypt it using the same password.
 *
 * Implementations of this interface should ensure that:
 * - The encryption is secure and uses modern cryptographic algorithms
 * - The encrypted data includes all necessary information for decryption (except the password)
 * - Password-based key derivation uses appropriate security parameters
 * - Encrypted data includes authentication to detect tampering
 *
 * ## Usage
 *
 * ```kotlin
 * // Encrypt sensitive data
 * val sensitiveData = "Secret information".encodeToByteArray()
 * val encryptedData = dataEncoder.encrypt(sensitiveData, "myStrongPassword")
 *
 * // Store the serialized encrypted data
 * val serialized = encryptedData.serialize()
 *
 * // Later, decrypt the data
 * val decryptedData = dataEncoder.decrypt(encryptedData, "myStrongPassword")
 * val originalText = decryptedData.decodeToString()
 * ```
 */
public interface DataEncoder {

    /**
     * Encrypts the provided data using the specified password.
     *
     * This method takes the raw data bytes and encrypts them using a key derived from
     * the provided password. The resulting [EncryptedData] object contains the encrypted
     * bytes along with all metadata needed for decryption (excluding the password itself).
     *
     * The encryption should be authenticated to ensure data integrity and should use
     * secure random values for all cryptographic parameters (salt, IV, etc.).
     *
     * @param data The raw data bytes to encrypt
     * @param password The password to use for encryption
     * @return An [EncryptedData] object containing the encrypted data and all necessary metadata
     * @throws IllegalArgumentException if the password or data doesn't meet implementation requirements
     */
    public fun encrypt(data: ByteArray, password: String): EncryptedData


    /**
     * Decodes the serialized encrypted data into an [EncryptedData] object.
     *
     * This method takes a byte array representing the serialized encrypted data and
     * deserializes it into an [EncryptedData] object. The serialized data must
     * be in the format expected by the implementation.
     *
     * @param serialized The byte array representing the serialized encrypted data
     * @return An [EncryptedData] object containing the deserialized data
     * @throws IllegalArgumentException if the serialized data is not in the expected format
     */
    public fun decodeData(serialized: ByteArray): EncryptedData


    /**
     * Decrypts the encrypted data using the specified password.
     *
     * This method takes an [EncryptedData] object previously generated by [encrypt] and
     * attempts to decrypt it using the provided password. The password must match the one
     * used during encryption.
     *
     * The method should verify data authenticity before returning the decrypted content.
     *
     * @param data The encrypted data to decrypt, must be an object returned by [encrypt]
     * @param password The password to use for decryption, must match the encryption password
     * @return The original decrypted data bytes
     * @throws MalformedDataException if the encrypted data is corrupted or has an invalid format
     * @throws InvalidPasswordException if the provided password is incorrect
     */
    public fun decrypt(data: EncryptedData, password: String): ByteArray
}

/**
 * Base class for exceptions thrown during decryption operations.
 *
 * This class serves as a base for more specific decryption-related exceptions,
 * such as `MalformedDataException` and `InvalidPasswordException`.
 *
 * @param message The detail message explaining the cause of the exception
 */
public abstract class DecryptionException(message: String?) : RuntimeException(message)

/**
 * Exception thrown when encrypted data is malformed or corrupted.
 *
 * This exception indicates that the data provided for decryption is either not valid
 * encrypted data or has been corrupted, making decryption impossible regardless of
 * the password provided.
 *
 * @param message The detail message explaining the cause of the exception
 * @param cause The underlying cause of the exception, if any
 */
public class MalformedDataException : Exception {
    public constructor(message: String? = null) : super(message)
    public constructor(message: String? = null, cause: Throwable? = null) : super(message, cause)
}

/**
 * Exception thrown when an incorrect password is provided for decryption.
 *
 * This exception indicates that the encrypted data appears to be valid, but the
 * provided password is incorrect, resulting in failure to decrypt the data.
 *
 * @param message The detail message explaining the cause of the exception
 * @param cause The underlying cause of the exception, if any
 */
public class InvalidPasswordException : Exception {
    public constructor(message: String? = null) : super(message)
    public constructor(message: String? = null, cause: Throwable? = null) : super(message, cause)
}